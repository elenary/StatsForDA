[["R_analysis.html", "13 Введение в анализ данных в R 13.1 Данные и переменные 13.2 Операции с переменными и функции 13.3 Начало рабты в среде 13.4 Начало рабты с данными 13.5 Задания после семинара 2", " 13 Введение в анализ данных в R Эта книжка написана с помощью языка программирования и обработки данных R и пакета Bookdown в среде работы с данными RStudio. Чтобы начать в ней работать, нужно скачать и установить сам язык R https://cran.r-project.org/ и скачать и установить RStudio, среду для работы https://posit.co/downloads/. 13.1 Данные и переменные Данные – это информация, представленная в форме, пригодной для хранения и обработки человеком или информационными системами (ISO/IEC/IEEE 24765-2010). Если данные представлены в форме для обработки информационными системами, они формализованы. Переменная – это оболочка, которую мы задаем, чтобы хранить в ней данные и выполнять операции с ними. У переменной есть название и те данные, которая она хранит. 13.1.1 Основные типы данных Числовой (целые числа – integer или numeric, вещественные числа – real, числа с плавающей точкой (дробные) – float) Текстовый (character, если один символ, или string – много символов) Логический (logical – принимает только значения True / False) NA – пропущенные значения (not available) NaN – not a number, результат выполнения невозможной числовой операции (например, деление на 0) 13.1.2 Основные структуры данных Вектор (vector) – одномерный массив одного типа данных Массив (array) – многомерный массив одного типа данных, состоящий из векторов одной длины Матрица (matrix) – двумерный массив только числовых данных Список (list) – по сути, многомерный массив, но может состоять из векторов разной длины и иметь данные разных типв Данные, датафрейм (dataframe) – по сути, cписок, но все вектора одной длины https://practicum.yandex.ru/blog/10-osnovnyh-struktur-dannyh/ 13.2 Операции с переменными и функции В зависимости от того, с переменными какого типа мы работаем, мы можем выполнять с ними разные операции. Операция – это выполнение каких-либо действий над данными. То, что выполняет это действие, называется оператором или функцией. Разница между ними в том, что оператор выполняет атомарные (единичные и простые действия), например, оператором может быть знак сложения, деления, больше или меньше и тд. Функция делает более сложные действия: например, создать вектор с помощью функции c(), прочитать данные с помощью функции read_csv(), отфильтровать данные с помощью функции select(). Обратите внимание, что при вызове функции после ее названия всегда ставятся круглые скобки. Тип данных Возможные атомарные операции Числовой = (присвоение), +, -, /, *, % Текстовый = (присвоение),+ (конкатенация), поиск по определенному символу Логический = (присвоение),&gt;, &lt;, == (равно), != (не равно) 13.3 Начало рабты в среде В этом учебнике я буду приводить задания для тренировки в любой среде работы с данными и код работы с данными в R. Для большинства интересных операций в R нам понадобятся дополнительные пакеты – набор функций, которые уже кто-то написал за нас (то же самое, как, например, import numpy as np в питоне). Нам в основном понадобится пакет tidyverse, дословно – \"вселенная чистых данных`. Сразу скажу, что все помеченной символом # – это комментарии, наши подсказки, которые не будут исполняться. Их важно всего оставлять для себя, чтобы не забыть, что вообще здесь происходит. Чтобы пакет заработал, его нужно 1. установить и 2. подключить # устанавливаем пакет install.packages(&quot;tidyverse&quot;) # подключаем пакет library(tidyverse) Установить пакет достаточно всего один раз после установки R, подключать через library нужно всегда, когда открываем RStudio. Ошибка вида “could not find function” в 99% случаев говорит о том, что пакет, из которого она используется, не подключен. 13.4 Начало рабты с данными Мы будем работать с данными World Happiness Report за 2016 год https://www.kaggle.com/datasets/unsdsn/world-happiness. Это Всемирный доклад о счастье https://en.wikipedia.org/wiki/World_Happiness_Report , которой показывает, как жители разных стран оценивают свой уровень счастья. В данных за 2016 год, с которыми мы будем работать, участвую 157 стран. Кстати, вы можете скачать данные за разные года и посмотреть, как менялось количество стран-участниц? Чуть позже мы научимся делать это с помощью кода. Здесь есть следующие переменные: Happiness Rank - позиция в рейтинге Happiness Score - абсолютное значение, набранное по уровню счастья SE - стандартная ошибка Economy - ВВП на душу населения Family - Социальная поддержка, ощущение семье Health - Продолжительность жизни Freedom - Свободы Trust (Goverment Corruption) - воспринимаемый уровень коррупции Generosity - сколько жертвуют на благотворительность Distopia - страна-антиутопия, где самые низкие показатели по всем парметрам из существующих Economy, Family, Health, Freedom, Trust, Generosity – 6 показателей, по которым считается уровень счастья. Чтобы совершать операции с данными, их сначала нужно прочитать, загрузить в среду работы с данными. В современных традициях R это проще всего сделать с помощью функции read_csv() из пакета tidyverse. Не забывайте, что любой вызов функции сопровождается круглыми скобками, в которые передаются аргументы. В функции read_csv()в скобках нужно передать путь к файлу, который мы хотим прочитать.Его можно скопировать через свойства файла. Но чтобы не заморачиваться с путем, проще всего положить файл с данными в ту же папку, где и лежит наш сам файл с кодом (для этого его нужно сохранить). А самое элегентное и используемое решение – создать проект File - New Project, и хранить все файл в папке проекта, это уберагает от большого числа ошибок. Про импорт файлов очень подробно расписано у Ивана Позднякова https://pozdniakov.github.io/tidy_stats/030-import_data.html whr &lt;- read_csv(&quot;2016.csv&quot;) # читаем данные View(whr) # просматриваем, что получилось передать в объект с названием whr Теперь я хочу поизучать эти данные. Помните, с чего мы начинаем изучение данных? С описательных статистик Я могу отобрать все переменные по одной и посчитать для них среднее и стандартное отклонение – это то, что в Jamovi находится во вкладке Descriptives. Так как колонка существует не в вакууме, а внутри датасета, то нам необходимо как-то указать, что нас интересует конкретная колонка внутри конкретного датасета. Пока что проще всего это сделать – с помощью значка $: whr$Family # отбираем всю колонку ## [1] 1.16374 1.14524 1.18326 1.12690 1.13464 1.09610 1.02912 1.17278 1.10476 ## [10] 1.08764 0.99537 1.08383 1.04782 1.02152 1.08113 1.09774 1.03938 1.05249 ## [19] 1.16157 1.03999 0.71460 0.86758 1.08672 0.90587 0.98912 1.06612 1.00793 ## [28] 0.87114 1.03143 1.09879 1.02169 1.00508 1.04477 0.84829 0.92624 0.87964 ## [37] 1.12945 0.83309 0.87119 0.77866 0.87758 0.94397 0.98569 1.03302 1.08268 ## [46] 0.80975 0.88025 0.89521 1.16810 1.04167 0.85974 0.68655 1.06054 0.95544 ## [55] 0.83132 1.05261 1.04685 0.72194 0.83779 1.06411 1.04993 0.81826 1.05613 ## [64] 0.81255 1.03817 0.75695 0.95076 0.95025 0.70697 1.11111 0.72803 1.05163 ## [73] 0.96372 0.60809 0.87021 0.33613 0.66062 0.87717 0.87625 0.86216 0.76042 ## [82] 0.87877 0.79381 0.90836 0.95434 0.81329 0.64367 0.74173 0.99496 0.38595 ## [91] 0.93164 0.26135 0.64184 0.94367 0.78236 0.79117 0.75862 0.43165 0.75473 ## [100] 0.75602 1.08983 0.54970 0.64498 0.75596 0.38857 0.63760 0.69699 0.71629 ## [109] 0.50163 0.24749 0.62800 0.59205 0.70362 0.62542 0.37932 0.96053 0.84783 ## [118] 0.29247 0.69981 0.49813 0.62477 0.76240 1.01413 0.49353 0.80676 0.19249 ## [127] 0.47799 0.77416 0.92542 0.84142 0.71478 0.14700 0.81928 0.72368 0.86333 ## [136] 0.29561 0.89186 0.60323 0.57576 0.53750 0.66366 0.60530 0.18519 0.63178 ## [145] 0.63054 0.90981 0.47493 0.46115 0.77623 0.50353 0.31090 0.61586 0.10419 ## [154] 0.11037 0.00000 0.14866 0.23442 Или можем вспомнить, что датафрейм имеет два измерения, как и двумерный массив, и можем обратиться по индексу: номер колонки и номер строки. Если нас интересует не конкретная строка, а все строки, то на месте этого индекс ничего не ставится, как бы пропускаем его. whr[,8] # отбираем всю колонку другим способом ## # A tibble: 157 × 1 ## Family ## &lt;dbl&gt; ## 1 1.16 ## 2 1.15 ## 3 1.18 ## 4 1.13 ## 5 1.13 ## 6 1.10 ## 7 1.03 ## 8 1.17 ## 9 1.10 ## 10 1.09 ## # … with 147 more rows Обратите внимание на выдачу: как вы думаете, какым структурам данных принадлежат результаты первого и второго способа? Посчитаем среднее и стандартное отклонение для этой колонки mean(whr$Family) # среднее ## [1] 0.7936211 sd(whr$Family) # стандартное отклонение ## [1] 0.2667057 13.5 Задания после семинара 2 Прочитайте в среде, в которой вы работаете, данные WHR за 2016 год. Посчитайте среднее, стандартное отклонение, медиану и размах (разброс от максимального до минимального значения) по всем 6 показателям, составляющим уровень счастья. Что можно сказать про них? Где самый большой размах? Где среднее и медиана оказались близко друг к другу, а где не очень? (для подсчета медианы и размаха в R нужно будет немножко поучиться гуглить или использовать другие материалы) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
